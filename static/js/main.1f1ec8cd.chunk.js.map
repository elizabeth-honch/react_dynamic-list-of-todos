{"version":3,"sources":["components/TodoList/TodoList.jsx","components/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","showUser","selectedTodoId","filterValue","selectFilterValue","handleFilterQuery","handleFilterType","className","type","name","value","placeholder","onChange","target","map","todo","key","id","classNames","TodoList__item","completed","title","button","onClick","userId","request","url","options","fetch","then","res","json","data","catch","error","CurrentUser","state","user","this","updateUser","props","newUserId","newUser","setState","email","phone","clearUser","React","Component","defaultProps","App","selectedUserId","selectUser","filterTodosByStatus","filter","filterTodosByTitle","includes","status","selectedUser","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f1ec8cd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  showUser,\n  selectedTodoId,\n  filterValue,\n  selectFilterValue,\n  handleFilterQuery,\n  handleFilterType,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__form\">\n      <input\n        type=\"text\"\n        name=\"title\"\n        value={filterValue}\n        placeholder=\"Choose Todo Title\"\n        onChange={({ target }) => handleFilterQuery(target.value)}\n        className=\"TodoList__input input\"\n      />\n      <select\n        name=\"completed\"\n        value={selectFilterValue}\n        onChange={({ target }) => handleFilterType(target.value)}\n        className=\"TodoList__select select\"\n      >\n        <option value=\"\">Filter by status</option>\n        <option value=\"all\">All</option>\n        <option value=\"active\">Active</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n    </div>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--checked': todo.completed === true,\n              'TodoList__item--unchecked': todo.completed === false,\n            })}\n          >\n            <label>\n              <input type=\"checkbox\" />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames({\n                button: true,\n                'TodoList__user-button--selected': selectedTodoId === todo.id,\n                'TodoList__user-button': true,\n              })}\n              type=\"button\"\n              onClick={() => showUser(todo.userId, todo.id)}\n            >\n              {`User ${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n    }).isRequired,\n  ).isRequired,\n  filterValue: PropTypes.string.isRequired,\n  selectFilterValue: PropTypes.string.isRequired,\n  handleFilterQuery: PropTypes.func.isRequired,\n  handleFilterType: PropTypes.func.isRequired,\n  showUser: PropTypes.func.isRequired,\n  selectedTodoId: PropTypes.number.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(res => res.json())\n  .then(res => res.data)\n  .catch(error => error);\n\nexport const getTodos = () => request('/todos');\nexport const getUser = id => request(`/users/${id}`);\n","// import { render } from 'node-sass';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.updateUser(this.props.userId);\n  }\n\n  componentDidUpdate() {\n    this.updateUser(this.props.userId);\n  }\n\n  updateUser(newUserId) {\n    if (this.state.user && this.state.user.id === newUserId) {\n      return;\n    }\n\n    getUser(newUserId)\n      .then((newUser) => {\n        this.setState({\n          user: newUser,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          user: null,\n        });\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { id, name, email, phone } = user;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">{`Selected user:${id}`}</h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__btn\"\n          onClick={() => clearUser(id)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  clearUser: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  user: {},\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: 0,\n    selectFilterValue: 'all',\n    filterValue: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  filterTodosByStatus = (todos) => {\n    if (this.state.selectFilterValue === 'completed') {\n      return todos.filter(todo => todo.completed === true);\n    }\n\n    if (this.state.selectFilterValue === 'active') {\n      return todos.filter(todo => todo.completed === false);\n    }\n\n    return todos;\n  }\n\n  filterTodosByTitle = (todos) => {\n    const { filterValue } = this.state;\n\n    if (filterValue === '') {\n      return todos;\n    }\n\n    return todos.filter((todo) => {\n      if (!todo.title) {\n        return false;\n      }\n\n      return todo.title.includes(filterValue);\n    });\n  }\n\n  handleFilterQuery = (value) => {\n    this.setState({\n      filterValue: value,\n    });\n  }\n\n  handleFilterType = (status) => {\n    this.setState({ selectFilterValue: status });\n  }\n\n  selectedUser = (userId, todoId) => {\n    this.setState({\n      selectedUserId: userId,\n      selectedTodoId: todoId,\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      selectedTodoId,\n      filterValue,\n      selectFilterValue,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.filterTodosByTitle(this.filterTodosByStatus(todos))}\n            showUser={this.selectedUser}\n            selectedTodoId={selectedTodoId}\n            filterValue={filterValue}\n            selectFilterValue={selectFilterValue}\n            handleFilterQuery={this.handleFilterQuery}\n            handleFilterType={this.handleFilterType}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}